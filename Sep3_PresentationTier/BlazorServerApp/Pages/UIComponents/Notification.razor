@using HTTPClients.ClientInterfaces
@using UIComponents
@using Domains.Entity
@using Domains.Enums
@using System.Timers
@using System.Text.RegularExpressions
@using Entity.Model
@namespace BlazorServerApp.Pages

@inject INotificationService NotificationService;
@inject NavigationManager NavMgr;
@inject AuthenticationStateProvider StateProvider;
@inject IRequestService RequestService;
@inject IUserService UserService;


<AuthorizeView>
    <Authorized>
        <div class="container-text">
            <span class="text">Welcome to Kanpay, @currentUser.FullName</span>
        </div>
        <div class="container">
            <img src="images/notification-bell.png" class="notification-icon" @onclick="@(HandleNotificationClick)" alt="notification" style="cursor: pointer"/>
            <div class="number-div">
                <button class="number">
                    <span class="noti_count">@notificationCount</span>
                </button>
            </div>


        </div>
        @if (showNotification)
        {
            <div class="noti-body ">
                <label class="header">Notifications</label>
                <hr class="hr1"/>
                <div class="card">
                    @foreach (var items in notifications)
                    {
                        <div class="card-body" @onclick="() => OnNotificationClicked(items.Id, items.NotificationType)">
                            <label class="date text-muted">@items.Date</label>
                            <label class="notification-table">@items.Message</label>
                        </div>
                    }
                </div>
            </div>
            
            @*<div class="notification_heading">
                <span> Notifcations </span>
                <button class="mark_all_as_read_btn">Mark All As Read</button>

            </div>*@
        }




        @if (clickedNotificationType!.Equals(TypesOfNotification.REQUEST_MONEY.ToString()))
        {
            <Modal ShowModal="@showModal">
                <div class="notificationInputField">
                    <input @bind="clickedNotificationEntity!.Sender!.FullName" type="text" disabled=""/>
                    <label class="notificationLabel">Sent By</label>
                </div>

                <div class="notificationInputField">
                    <input type="text" @bind="clickedNotificationAmount" disabled=""/>
                    <label class="notificationLabel">Amount</label>
                </div>

                <div class="notificationInputField">
                    <input @bind="clickedNotificationEntity!.Date" type="text" disabled=""/>
                    <label class="notificationLabel">Sent Date</label>
                </div>


                <div class="wrapper_loaded">
                    <div class="container-button">
                        <a href="#" class="popUp-button" @onclick="HandleAccept">
                            <span class=" icon check-icon">&#10004;</span>
                            <span>Accept</span>
                        </a>
                    </div>

                    <div class="container-button">
                        <a href="#" class="popUp-button" @onclick="HandleReject">
                            <span class="icon cross-icon">&#10007;</span>
                            <span>Reject</span>
                        </a>
                    </div>
                </div>
            </Modal>
        }

    </Authorized>

</AuthorizeView>

@code {
    // private UserEntity? senderUser;
    private UserEntity? currentUser = new UserEntity();
    private ICollection<NotificationEntity>? notifications = new List<NotificationEntity>();
    private bool showNotification = false;
    private int notificationCount;
    private Timer timer;

    // properties for notification popup
    private long clickedNotificationId;
    private bool showModal = false;
    private string? clickedNotificationType = "";
    // private string? clickedNotificationDate;
    // private UserEntity? clickedNotificationRequestSender = new UserEntity();
    private int clickedNotificationAmount;
    private long clickedNotificationForRequestId;
    private RequestEntity? requestById = new RequestEntity();
    private NotificationEntity? clickedNotificationEntity = new NotificationEntity();


    protected override async Task OnInitializedAsync()
    {
        await UpdateNotifications();

        AuthenticationState state = await StateProvider.GetAuthenticationStateAsync();
        string username = state.User.Claims.FirstOrDefault(claim => claim.Type.Equals("username"))!.Value.ToString();

        currentUser = await UserService.FetchUserByUsernameAsync(username);


    // Start the timer to update notifications every 5 seconds
        if (state.User.Identity!.IsAuthenticated)
        {
            timer = new Timer(5000);
            timer.Elapsed += TimerElapsedAsync;
            timer.Start();
        }
    }

    private async Task UpdateNotifications()
    {
        try
        {
            notifications = await NotificationService.FetchAllNotificationsByReceiverAsync(currentUser.UserName);
            notificationCount = notifications.Count;

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private async Task OnNotificationClicked(long itemsId, string? itemsNotificationType)
    {
        clickedNotificationId = itemsId;
        clickedNotificationType = itemsNotificationType;

        clickedNotificationEntity = await NotificationService.FetchNotificationById(clickedNotificationId);
    // clickedNotificationRequestSender = clickedNotificationEntity.Sender!;
        clickedNotificationAmount = ExtractAmountFromMessage(clickedNotificationEntity.Message);
        clickedNotificationForRequestId = ExtractIdFromMessage(clickedNotificationEntity.Message);
        showModal = true;
    }

    private int ExtractAmountFromMessage(string? byIdMessage)
    {
        int dollarIndex = byIdMessage!.IndexOf("$", StringComparison.Ordinal);
        int spaceIndex = byIdMessage.IndexOf(" ", dollarIndex + 1, StringComparison.Ordinal);

        if (dollarIndex != -1 && spaceIndex != -1)
        {
            string amountString = byIdMessage.Substring(dollarIndex + 1, spaceIndex - dollarIndex - 1);

            if (!string.IsNullOrWhiteSpace(amountString))
            {
                return Convert.ToInt32(amountString);
            }
        }

        return 0;
    }

    private int ExtractIdFromMessage(string? byIdMessage)
    {
        int startIndex = byIdMessage!.IndexOf("Request ", StringComparison.Ordinal) + "Request ".Length;
        int endIndex = byIdMessage.IndexOf(" Received", StringComparison.Ordinal);

        if (startIndex != -1 && endIndex != -1)
        {
            string numberString = byIdMessage.Substring(startIndex, endIndex - startIndex);
            return Convert.ToInt32(numberString);
        }
        return 0;
    }


    // Method called when the timer's elapsed event is triggered
    private async void TimerElapsedAsync(object? sender, ElapsedEventArgs e)
    {
        await UpdateNotifications();
    }


    private async void HandleNotificationClick()
    {
        showNotification = !showNotification;

        if (notifications.Count != 0)
        {
    // await NotificationService.MarkAllNotificationsAsReadAsync((List<NotificationEntity>)notifications!);
            await InvokeAsync(StateHasChanged);
        }
    }


    private async Task HandleAccept()
    {
        TransferValues.RequestSender = clickedNotificationEntity!.Sender;
        TransferValues.RequestedAmount = clickedNotificationAmount;
        showModal = false;

        await UpdateRequestStatus(clickedNotificationForRequestId, RequestStatus.APPROVED.ToString(), true);
        await NotificationService.MarkNotificationAsReadAsync(clickedNotificationEntity);
        NavMgr.NavigateTo("/SendMoney");
    }

    private async Task HandleReject()
    {
        NotificationEntity notificationEntity = new NotificationEntity()
        {
            Sender = currentUser,
            Receiver = clickedNotificationEntity.Sender!,
            Date = DateTime.Now.Date.ToString(),
            Message = $"{currentUser.FullName} rejected your money request for ${clickedNotificationAmount} CAD.",
            IsRead = false,
            NotificationType = TypesOfNotification.REQUEST_REJECT.ToString()
        };


        await NotificationService.CreateNotificationAsync(notificationEntity);
        await NotificationService.MarkNotificationAsReadAsync(clickedNotificationEntity);
        await UpdateRequestStatus(clickedNotificationForRequestId, RequestStatus.DECLINED.ToString(), false);
        showModal = false;
    }

    private async Task UpdateRequestStatus(long requestId, string? status, bool isApproved)
    {
        RequestEntity requestEntity = await RequestService.FetchRequestById(requestId);
        requestEntity.Status = status;
        requestEntity.IsApproved = isApproved;
        await RequestService.UpdateRequestAsync(requestEntity);
    }

}