@using Domains.Entity
@using HTTPClients.ClientInterfaces
@namespace BlazorServerApp.Pages
@inject INotificationService NotificationService;
@inject NavigationManager NavMgr;
@inject AuthenticationStateProvider StateProvider;


<AuthorizeView>
    <Authorized>
        <div class="container-text">
            <span class="text">Welcome to Kanpay, @receiver</span>
        </div>
        <div class="container">
            <img src="images/notification-bell.png" class="notification-icon" @onclick="@(HandleNotificationClick)" alt="notification" style="cursor: pointer"/>
            <div class="number-div">
                <button class="number">
                    <span class="noti_count">@notifications!.Count</span>
                </button>
            </div>


        </div>
        @if (showNotification)
        {
            <div class="noti-body ">
                <label class="header">Notifications</label>
                <hr class="hr1"/>
                <div class="card">
                    @foreach (var items in notifications)
                    {
                        <div class="card-body">
                            <label class="date text-muted">@items.Date</label>
                            <label class="notification-table">@items.Message</label>
                        </div>
                    }
                </div>
            </div>
        }
    </Authorized>
</AuthorizeView>

@code {
    private UserEntity? senderUser;
    private string? receiver;
    private ICollection<NotificationEntity>? notifications = new List<NotificationEntity>();
    private bool showNotification = false;

    // private UserEntity? receiverUser = new UserEntity();
    // private string? notificationType;
    // public string? Message = "";
    // private DateTime dateTime = DateTime.Now.Date;
    // public bool IsRead;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AuthenticationState state = await StateProvider.GetAuthenticationStateAsync();
            receiver = state.User.Claims.FirstOrDefault(claim => claim.Type.Equals("username"))!.Value.ToString();

            notifications = await NotificationService.FetchAllNotificationsByReceiverAsync(receiver);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private void HandleNotificationClick()
    {
        showNotification = !showNotification;
        NotificationService.MarkAllNotificationsAsReadAsync((List<NotificationEntity>)notifications!);
    }


    /*public async Task CreateNotification()
    {
        try
        {
            Message = "someone has sent you money bororo";
            string date = $"{dateTime.Date.Day}/{dateTime.Date.Month}/{dateTime.Date.Year}";
            NotificationEntity notificationEntity = new NotificationEntity
                (notificationId, senderUser, receiverUser, Message, notificationType, date, IsRead);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }*/



}