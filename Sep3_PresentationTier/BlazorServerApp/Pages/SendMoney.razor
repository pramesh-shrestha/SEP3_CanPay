@page "/SendMoney"
@using Domains.Entity
@using HTTPClients.ClientInterfaces
@inject IUserService UserService;
@inject AuthenticationStateProvider StateProvider;

<body>
<div class="container">
    <h3>Send Money</h3>
    <div class="row">
        <div class="col-md-3 first-box">
            
            <div class="icon-image">
                <img src="images/KANPAY logo.png" alt="">
            </div>
            
            <div class="buttonDiv">
                <button class="button">Send</button>
                <button class="button">Cancel</button>
            </div>
        </div>
        
        <!-- 8 Columns -->
        <div class="col-md-6">
            <div class="form-group">
                <div><label>@sender</label></div>
                <label>From</label>

                <div class="inputFields">
                    <select @bind="selectedCardId" class="fieldLength">
                        <option selected value="">Select card</option>
                        @* <option value="@user.Card.CardId">@user.Card.CardNumber</option> *@

                    </select>
                </div>
                <label>To</label>
                <div class="inputFields">
                    <input type="text" class="fieldLength" @bind="receiver" @bind:event="oninput" placeholder="Search username...">
                </div>

                <label>Amount</label>
                <div class="inputFields">
                    <input type="text" class="fieldLength" @bind="amount">
                </div>

                <label>Date</label>
                <div class="inputFields">
                    <input type="date" @bind="dateTime" min="@DateTime.Now.Date.ToString("yyyy-MM-dd")" max="@DateTime.Now.Date.ToString("yyyy-MM-dd")">
                </div>

            </div>
        </div>
        <div class="col-md-3 third-box">
            <img src="images/send money.gif" alt="" class="gifImage">
        </div>
        
        
    </div>
</div>
</body>

@code {
    private string? sender;
    private string receiver;
    private int amount;
    private DateTime dateTime = DateTime.Now.Date;
    private int selectedCardId;
    IEnumerable<UserEntity> userEntities;
    List<string> usernames;

    protected override async Task OnInitializedAsync() {
        AuthenticationState state = await StateProvider.GetAuthenticationStateAsync();
        sender = state.User.Identity?.Name;
        // userEntities = await UserService.FetchAllUsersAsync();
    }

}