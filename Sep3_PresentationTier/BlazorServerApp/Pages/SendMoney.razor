@page "/SendMoney"
@using Domains.Entity
@using Domains.Enums
@using Entity.Model
@using HTTPClients.ClientInterfaces
@using UIComponents

@inject IUserService UserService;
@inject ITransactionService TransactionService;
@inject AuthenticationStateProvider StateProvider;
@inject NavigationManager NavMgr;
@inject INotificationService NotificationService;
@inject IRequestService RequestService;

@if (isAuthorized)
{
    <div class="container">
        <h3>Send Money</h3>

        <div class="wrapper_loaded">

            @* all transactions radio *@
            <div class="radio_container">
                <input class="radio_option" type="radio" name="btn" checked="" value="@TypesOfTransaction.SendMoney"
                       @onchange="ChangeTransactionType"/>
                <div class="filter_btn">
                    <span class="span">Send Money</span>
                </div>
            </div>

            @* sent transactions radio *@
            <div class="radio_container">
                <input class="radio_option" type="radio" name="btn"
                       value="@TypesOfTransaction.RequestMoney" @onchange="ChangeTransactionType"/>
                <div class="filter_btn">
                    <span class="span">Request Money</span>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-3 first-box">

                <div class="icon-image">
                    <img src="images/KANPAY logo.png" alt="">
                </div>

                <div class="buttonDiv">
                    <button class="button" @onclick="HandleSendButtonClick">Send</button>
                    <button class="button" @onclick="BackToHome">Cancel</button>
                </div>
            </div>

            <div class="col-md-6">

                <!-- 8 Columns -->
                @if (transactionType!.Equals(TypesOfTransaction.SendMoney.ToString()))
                {
                    <div class="form-group">
                        <div>
                            <span>@sender.ToUpper()</span>
                        </div>

                        <label>From</label>

                        <div class="inputFields">
                            <input type="text" class="fieldLength" @bind="cardNumber" disabled="">
                        </div>
                        <label>To</label>
                        <div class="inputFields">
                            <input type="text" class="fieldLength" @bind="receiver" @bind:event="oninput" placeholder="Search username...">
                        </div>

                        <label>Amount</label>
                        <div class="inputFields">
                            <input type="number" class="fieldLength" @bind="amount">
                        </div>

                        <label>Date</label>
                        <div class="inputFields">
                            <input type="date" @bind="dateTime" min="@DateTime.Now.Date.ToString("yyyy-MM-dd")" max="@DateTime.Now.Date.ToString("yyyy-MM-dd")">
                        </div>

                        <label>Comment</label>
                        <div class="inputFields">
                            <input type="text" class="fieldLength" @bind="comment" placeholder="Add comment">
                        </div>

                    </div>
                }
                else if (transactionType.Equals(TypesOfTransaction.RequestMoney.ToString()))
                {
                    <div class="col-md-6">
                        <div class="form-group">
                            <div>
                                <span>@sender.ToUpper()</span>
                            </div>

                            @*<label>From</label>

                            <div class="inputFields">
                                <input type="text" class="fieldLength" @bind="cardNumber" disabled="">
                            </div>*@
                            <label>To</label>
                            <div class="inputFields">
                                <input type="text" class="fieldLength" @bind="receiver" @bind:event="oninput" placeholder="Search username...">
                            </div>

                            <label>Amount</label>
                            <div class="inputFields">
                                <input type="number" class="fieldLength" @bind="amount">
                            </div>

                            <label>Date</label>
                            <div class="inputFields">
                                <input type="date" @bind="dateTime" min="@DateTime.Now.Date.ToString("yyyy-MM-dd")" max="@DateTime.Now.Date.ToString("yyyy-MM-dd")">
                            </div>

                            @* <label>To</label> *@
                            @* <div class="inputFields"> *@
                            @*     <input type="text" class="fieldLength" @bind="comment" placeholder="Add comment"> *@
                            @* </div> *@

                            <label>Comment</label>
                            <div class="inputFields">
                                <input type="text" class="fieldLength" @bind="comment" placeholder="Add comment">
                            </div>

                        </div>
                    </div>
                }

            </div >

            @* html for username list *@
            <div class="col-md-3 third-box usernameList">
                <h4>List of usernames</h4>
                @foreach (var item in usernames)
                {
                    if (item.ToLower().Contains(receiver.ToLower()))
                    {
                        <ul>
                            <li @onclick="() => receiver = item">@item</li>
                        </ul>
                    }
                }
            </div>

        </div>

        @* html code for error label *@
        <div class="error">
            @if (!string.IsNullOrEmpty(errorLabel))
            {
                <label style="color: @color">@errorLabel</label>
            }
        </div>
    </div>

    <Modal ShowModal="showModal">
        <p >You have successfully transferred the amount!</p>
        <div>
            <button class="button" @onclick="@Proceed">OK</button>
        </div>
    </Modal>
}
else
{
    <h2>You must be logged in to be able to view this page--</h2>
}

@code
{

    // send money and request money
    public string? sender = "";
    public string? receiver = "";
    public string? amount = "";
    private DateTime dateTime = DateTime.Now.Date;
    private long cardNumber;
    private string? comment = "";

    // list of username
    private IEnumerable<UserEntity?> userEntities = new List<UserEntity?>();
    private List<string?> usernames = new List<string?>();
    private UserEntity? senderUser = new UserEntity();
    private UserEntity? receiverUser = new UserEntity();

    // radio buttons properties
    private string? transactionType = TypesOfTransaction.SendMoney.ToString();

    // extras
    public string? errorLabel = "";
    private string? color = "";
    private bool showModal;
    private bool isAuthorized;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            userEntities = await UserService.FetchAllUsersAsync();

            AuthenticationState state = await StateProvider.GetAuthenticationStateAsync();
            sender = state.User.Claims.FirstOrDefault(claim => claim.Type.Equals("username"))!.Value.ToString();
            isAuthorized = state.User.Identity!.IsAuthenticated;

            IEnumerable<UserEntity?> entities = userEntities.ToList();
            senderUser = entities.FirstOrDefault(u => u.UserName.Equals(sender));
            cardNumber = senderUser.Card.CardNumber;

            usernames = entities.Select(u => u.UserName).ToList();
            usernames.Remove(senderUser.UserName);
        }
        catch (Exception e)
        {
            errorLabel = e.Message;
            color = "red";
        }
    }


    //send money to receiver
    private async Task SendMoneyToReceiver()
    {
        receiverUser = userEntities.FirstOrDefault(u => u.UserName.ToLower().Equals(receiver.ToLower()));
        string date = $"{dateTime.Date.Day}/{dateTime.Date.Month}/{dateTime.Date.Year}";

        TransactionEntity transactionEntity = new TransactionEntity(senderUser, receiverUser, int.Parse(amount), date, comment);
        try
        {
            if (string.IsNullOrEmpty(receiver)) throw new Exception("Receiver must be selected.");
            if (int.Parse(amount) <= 0) throw new Exception("Amount must be more than 0.");

            if (string.IsNullOrEmpty(errorLabel))
            {
                await TransactionService.CreateTransactionAsync(transactionEntity);
                await CreateNotification();
                showModal = true;
            }
        }
        catch (Exception e)
        {
            errorLabel = e.Message;
            color = "red";
        }
    }


    private async Task SendMoneyRequest()
    {
        try
        {
            if (string.IsNullOrEmpty(receiver)) throw new Exception("Receiver must be selected.");
            if (int.Parse(amount) <= 0) throw new Exception("Amount must be more than 0.");

            receiverUser = userEntities.FirstOrDefault(u => u.UserName.ToLower().Equals(receiver.ToLower()));
            string date = $"{dateTime.Date.Day}/{dateTime.Date.Month}/{dateTime.Date.Year}";

            RequestEntity entity = new RequestEntity()
            {
                Amount = Convert.ToInt32(amount),
                Comment = comment,
                RequestReceiver = receiverUser,
                RequestSender = senderUser,
                Status = RequestStatus.Pending.ToString(),
                IsApproved = false,
                RequestedDate = date
            };

            if (string.IsNullOrEmpty(errorLabel))
            {
                await RequestService.CreateRequestAsync(entity);
                await CreateNotification();
                showModal = true;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw new Exception(e.Message);
        }
    }


    private async Task CreateNotification()
    {
        try
        {
            string date = $"{dateTime.Date.Day}/{dateTime.Date.Month}/{dateTime.Date.Year}";
            NotificationEntity notificationEntity = new NotificationEntity
            {
                Date = date,
                Sender = senderUser,
                Receiver = receiverUser, IsRead = false
            };

            switch (transactionType)
            {
                case nameof(TypesOfTransaction.SendMoney):
                    notificationEntity.NotificationType = TypesOfTransaction.SendMoney.ToString();
                    notificationEntity.Message = $"{senderUser.FullName} has sent you  {amount} dollar";
                    break;
                case nameof(TypesOfTransaction.RequestMoney):
                    notificationEntity.NotificationType = TypesOfTransaction.RequestMoney.ToString();
                    notificationEntity.Message = $"{senderUser.FullName} has asked you  {amount} dollar";
                    break;
            }

            await NotificationService.CreateNotificationAsync(notificationEntity);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task HandleSendButtonClick()
    {
        switch (transactionType)
        {
            case nameof(TypesOfTransaction.SendMoney):
                await SendMoneyToReceiver();
                break;
            case nameof(TypesOfTransaction.RequestMoney):
                await SendMoneyRequest();
                break;
        }
    }


    //navigate back to home page
    private void BackToHome()
    {
        NavMgr.NavigateTo("/");
    }

    private void Proceed()
    {
        showModal = false;
        NavMgr.NavigateTo("/");
    }

    private void ChangeTransactionType(ChangeEventArgs arg)
    {
        transactionType = arg.Value!.ToString();
        InvokeAsync(StateHasChanged);
    }

    //For testing purpose only
    public async Task<String> GetErrorMessage()
    {
        try
        {
            await SendMoneyToReceiver();
        }
        catch (Exception e)
        {
            return e.Message;
        }

        return null;
    }
}