@page "/ManageProfile"
@using Domains.Entity
@using HTTPClients.ClientInterfaces
@using UIComponents
@using BCrypt.Net
@inject AuthenticationStateProvider StateProvider;
@inject IUserService UserService;
@inject NavigationManager NavMgr;


<div class="container mt-6">
    <div class="card">

        <div class="card-header">
            <h2 class="card-title">Manage Profile</h2>
        </div>

        <div class="card-body">
       
            <div class="form-row">
                <div>
                    <label  class="form-label">Username</label>
                    <input type="text"  @bind="username" disabled>
                    
                </div>
                
                <div>
                    <label  class="form-label">Password</label>
                    <input type="password" @bind="password" disabled >
                </div>
            </div>
            
            <div class="form-row">
                <div>
                    <label class="form-label">Fullname</label>
                    <input type="text"  @bind="fullName" disabled="@IsDisabled" >
                </div>
                            
                <div>
                    <label  class="form-label">Card Number</label>
                    <input type="text" @bind="cardNumber" disabled="@IsDisabled">
                </div>
            </div>
            
            <div class="form-row">
                <div>
                    <label class="form-label">Expiry Date</label>
                    <input type="text"  @bind="expiryDate" disabled="@IsDisabled">
                </div>
                                        
                <div>
                    <label  class="form-label">Cvv (3-digits)</label>
                    <input type="text" @bind="cvv" disabled="@IsDisabled" >
                </div>
            </div>
            
            


            <div class="form-row buttons">
                <div>
                    <button class="btn btn-primary" @onclick="SaveChanges">Save Changes</button>
                    <button class="btn btn-primary  align-right">Cancel</button>
                </div>
                <div>
                    @* @onclick:preventDefault -- prevent the default behavior of the button and prevent the page from reloading or submitting the form.
                    It is necessary because there's a form submit or page reload happening that is resetting the form to its initial state. *@
                    <button class="btn btn-primary edit-button" @onclick="Enable" >Edit Profile</button>
                    <button class="btn btn-primary align-right" @onclick="ChangePassword" @onclick:preventDefault>Change Password</button>
                </div>
            </div>
   
            
            <div class="mt-2">
                <label class="form-label" style="color: @color">@error</label>
            </div>
        </div>

    </div>
</div>

<Modal ShowModal="showModal">
    <form>
        <div class="mb-3">
            <label class="form-label">Your current password</label>
            <input type="text" class="form-control" @bind="currentPassword">
        </div>
        <div class="mb-3">
            <label class="form-label">New password</label>
            <input type="text" class="form-control" @bind="newPassword">
        </div>
        <div class="mb-3">
            <label class="form-label">Confirm new password</label>
            <input type="text" class="form-control" @bind="confirmNewPassword">
        </div>
    </form>
    <div>
        <button class="button" @onclick="@Proceed">OK</button>
        <button class="button"  @onclick="@GoBack">Go Back</button>
    </div>
    <div class="mt-2">
        <label class="form-label" style="color: @color">@errorLabel</label>
    </div>
    
</Modal>

@code {
    private string username { get; set; }
    private UserEntity User { get; set; }
    private bool IsDisabled { get; set; } = true;
    private bool showModal;
    private string password;
    private string fullName;
    private long cardNumber;
    private string expiryDate;
    private int cvv;
    private int currentBalance;
    private string currentPassword;
    private string newPassword;
    private string confirmNewPassword;
    private string errorLabel;
    private string error;
    private string color;
    
    protected override async Task OnInitializedAsync() {
        AuthenticationState state = await StateProvider.GetAuthenticationStateAsync();
        username = state.User.Claims.FirstOrDefault(claim => claim.Type.Equals("username"))!.Value.ToString();
        User = await UserService.FetchUserByUsernameAsync(username);
        password = User.Password!;
        cardNumber = User.Card!.CardNumber;
        expiryDate = User.Card!.ExpiryDate!;
        cvv = User.Card!.Cvv;
        currentBalance = User.Balance;
        fullName = User.FullName!;
    }
    
    //enable the card input fields
    private void Enable() {
        IsDisabled = false;
    }
    
     
    private void Proceed() {
        errorLabel = "";
    // Extract the salt from the Java hashed password
        string salt = password.Substring(0, 29);
        int rounds = 10;
        string hashedCurrentPassword = BCrypt.HashPassword(currentPassword, salt + rounds);
        Console.WriteLine(password);
        Console.WriteLine(hashedCurrentPassword);
        
        try {
            if (!hashedCurrentPassword.Equals(password)) {
                errorLabel = "Wrong current password!";
                color = "red";
            }
    
            if (!newPassword.Equals(confirmNewPassword)) {
                throw new Exception("New password mismatch!");
            }
    
            if (string.IsNullOrEmpty(errorLabel)) {
                showModal = false;
                error = "Password changed successfully!";
                color = "green";
                password = newPassword;
            }
            
    
        }
        catch (Exception e) {
            errorLabel = e.Message;
            color = "red";
        }
        
    }
    
    private void ChangePassword() {
        showModal = true;
    }
    
    private void GoBack() {
        showModal = false;
    }
    
    private async Task SaveChanges() {
        DebitCardEntity cardEntity = new DebitCardEntity(cardNumber, expiryDate, cvv);
        UserEntity userEntity = new() {
            UserName = username,
            Password = password,
            Balance = currentBalance,
            Card = cardEntity,
            FullName = fullName
        };
    
        try {
            await UserService.UpdateUserAsync(userEntity);
        }
        catch (Exception e) {
            errorLabel = e.Message;
        }
    }
}