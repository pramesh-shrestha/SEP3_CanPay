@page "/ManageProfile"
@using Domains.Entity
@using HTTPClients.ClientInterfaces
@using UIComponents
@using BCrypt.Net
@using System.Text.RegularExpressions
@using System.Globalization
@inject AuthenticationStateProvider StateProvider;
@inject IUserService UserService;
@inject NavigationManager NavMgr;

@if (isAuthorized)
{
    <div class="container mt-6">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">Manage Profile</h4>
            </div>

            <div class="card-body">

                <div class="form-row">
                    <div>
                        <label class="form-label">Username</label>
                        <input type="text" @bind="username" disabled class="fieldInput">

                    </div>

                    <div>
                        <label class="form-label">Password</label>
                        <input type="password" @bind="password" disabled class="fieldInput">
                    </div>
                </div>

                <div class="form-row">
                    <div>
                        <label class="form-label">Fullname</label>
                        <input type="text" @bind="fullName" disabled="@IsDisabled" class="fieldInput" style="background-color: @toChangeToWhite">
                    </div>

                    <div>
                        <label class="form-label">Card Number</label>
                        <input type="number" pattern="[0-9]*" inputmode="numeric" @bind="cardNumber" disabled="@IsDisabled" class="fieldInput" style="background-color: @toChangeToWhite">
                    </div>
                </div>

                <div class="form-row">
                    <div>
                        <label class="form-label">Expiry Date</label>
                        <input type="text" pattern="[0-9]*\/?" @bind="expiryDate" disabled="@IsDisabled" class="fieldInput" style="background-color:@toChangeToWhite">
                    </div>

                    <div>
                        <label class="form-label">Cvv (3-digits)</label>
                        <input type="number" pattern="[0-9]*" inputmode="numeric" @bind="cvv" disabled="@IsDisabled" class="fieldInput" style="background-color: @toChangeToWhite">
                    </div>
                </div>

                <div class="form-row buttons">
                    <div>
                        <button class="buttonCard" @onclick="SaveChanges" disabled="@IsDisabled" style="color: @(IsDisabled ? "grey" : "white")">Save Changes</button>
                        <button class="buttonCard  align-right" @onclick="@(() => NavMgr.NavigateTo("/"))">Cancel</button>
                    </div>
                    <div>
                        @* @onclick:preventDefault -- prevent the default behavior of the button and prevent the page from reloading or submitting the form.
                    It is necessary because there's a form submit or page reload happening that is resetting the form to its initial state. *@
                        <button class="buttonCard" @onclick="() => editProfile = true">Edit Profile</button>
                        <button class="buttonCard align-right" @onclick="() => showModal = true" @onclick:preventDefault disabled="@IsDisabled" style="color: @(IsDisabled ? "grey" : "white")">Change Password</button>
                    </div>
                </div>
                

                <div class="mt-2">
                    <label style="color: @color">@error</label>
                </div>
            </div>

        </div>
    </div>

@* Modal for changing password *@
    <Modal ShowModal="showModal">
        <form>
            @* <div class="mb-3"> *@
            @*     <label >Your current password</label> *@
            @*     <input type="text" class="form-control" @bind="currentPassword"> *@
            @* </div> *@
            <div class="mb-3">
                <label >New password</label>
                <input type="password" class="form-control" @bind="newPassword">
            </div>
            <div class="mb-3">
                <label >Confirm new password</label>
                <input type="password" class="form-control" @bind="confirmNewPassword">
            </div>
        </form>
        <div>
            <button class="button" @onclick="@Proceed">OK</button>
            <button class="button" @onclick="@GoBack">Go Back</button>
        </div>
        <div class="mt-2">
            <label style="color: @color">@errorLabel</label>
        </div>
    </Modal>

@* Modal for confirmation after successful profile update *@
    <Modal ShowModal="confirmation">
        <p >Your profile is updated successfully.</p>
        <div>
            <button class="button" @onclick="@GoBack">OK</button>
        </div>
    </Modal>

@* Modal for editing profile *@
    <Modal ShowModal="editProfile">
        <div class="mb-3">
            <label >Enter your password</label>
            <input type="password" class="form-control" @bind="currentPassword">
        </div>
        <div>
            <button class="button" @onclick="@CheckPassword">OK</button>
            <button class="button" @onclick="() => editProfile = false">Cancel</button>
        </div>
        <div class="mt-2">
            <label style="color: @color">@checkPasswordError</label>
        </div>
    </Modal>
}
else
{
    <h2>You must be logged in to be able to view this page--</h2>
}


@code {
    public string username { get; set; }
    public UserEntity? User { get; set; }
    public bool IsDisabled { get; set; } = true;
    public bool showModal;
    public bool confirmation;
    public string? password;
    public string? fullName;
    public long cardNumber;
    public string? expiryDate;
    public int cvv;
    public int currentBalance;
    public string? currentPassword = "";
    public string? newPassword = "";
    public string? confirmNewPassword = "";
    public string? errorLabel;
    public string? error;
    public string? checkPasswordError;
    public string? color;
    public string? toChangeToWhite;
    public bool editProfile;
    public string tempPassword;

    private bool isAuthorized;

    /// <summary>
    /// Initializes the component and fetches the user information from the UserService.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
    // Get the current authenticated user's information
        AuthenticationState state = await StateProvider.GetAuthenticationStateAsync();
        username = state.User.Claims.FirstOrDefault(claim => claim.Type.Equals("username"))!.Value.ToString();
        isAuthorized = state.User.Identity!.IsAuthenticated;


        User = await UserService.FetchUserByUsernameAsync(username);
        password = User.Password!;
        cardNumber = User.Card!.CardNumber;
        expiryDate = User.Card!.ExpiryDate;
        cvv = User.Card!.Cvv;
        currentBalance = User.Balance;
        fullName = User.FullName!;
    }


    /// <summary>
    /// Checks if the current password is correct to enable profile editing.
    /// </summary>
    private void CheckPassword()
    {
        errorLabel = "";
        try
        {
            if (string.IsNullOrEmpty(currentPassword))
                throw new Exception("You must enter your current password.");

            bool isPasswordValid = BCrypt.Verify(currentPassword, password);

            if (isPasswordValid)
            {
                IsDisabled = false;
                toChangeToWhite = "white";
                editProfile = false;
            }

            else
            {
                throw new Exception("You entered wrong password!");
            }
        }
        catch (Exception e)
        {
            checkPasswordError = e.Message;
            color = "red";
        }
    }


    /// <summary>
    /// Proceeds with changing the password after validating the new password and confirmation.
    /// </summary>
    public void Proceed()
    {
        string passwordRegex = @"^(?=.*\S).{6,}$";
        errorLabel = "";

        try
        {
            if ((string.IsNullOrEmpty(newPassword) || string.IsNullOrEmpty(confirmNewPassword)))
                throw new Exception("All fields required!");

            if (!newPassword.Equals(confirmNewPassword))
                throw new Exception("New password mismatch!");

            if (!Regex.IsMatch(newPassword, passwordRegex))
                throw new Exception("Password Must Be More Than 6 Characters Long.");

            if (newPassword.Equals(currentPassword))
                throw new Exception("You must enter new password different from your current password.");


            if (string.IsNullOrEmpty(errorLabel))
            {
                showModal = false;
                error = "Password changed successfully!";
                color = "#79F400";
                currentPassword = newPassword;
            }
        }
        catch (Exception e)
        {
            errorLabel = e.Message;
            color = "red";
        }
    }

    /// <summary>
    /// Resets the password change modal and its inputs.
    /// </summary>
    private void GoBack()
    {
        newPassword = string.Empty;
        confirmNewPassword = string.Empty;
        showModal = false;
        confirmation = false;
    }

    //For testing purpose only
    public async Task<String> GetErrorMessage()
    {
        try
        {
            await SaveChanges();
        }
        catch (Exception e)
        {
            return e.Message;
        }

        return null;
    }


    /// <summary>
    /// Saves the changes made to the user's profile.
    /// </summary>
    private async Task SaveChanges()
    {
        string pattern = @"^[0-9/]*$";
        bool isMatch = Regex.IsMatch(expiryDate, pattern);

        try
        {
            if (string.IsNullOrEmpty(fullName) || string.IsNullOrEmpty(expiryDate)) throw new Exception("Fullname or Expiry Date Fields Cannot Be Left Empty.");
            if (cardNumber == 0) throw new Exception("Card Number Cannot Be Empty");
            if (cvv == 0) throw new Exception("CVV Cannot Be Empty");
            if (cardNumber.ToString().Length != 16) throw new Exception("Card Number Must Be 16 Digits Long");
            if (!isMatch) throw new Exception("Invalid Date");
            if (isMatch)
            {
                DateTime date = Convert.ToDateTime(expiryDate);
                if (date.Year < DateTime.Now.Year || date.Year > 2099)
                {
                    throw new Exception("Invalid Year");
                }
            }
            if (cvv.ToString().Length != 3) throw new Exception("CVV must be 3 digits long");

            DebitCardEntity cardEntity = new DebitCardEntity(cardNumber, expiryDate, cvv)
            {
                CardId = User.Card.CardId
            };

            UserEntity userEntity = new()
            {
                UserName = username,
                Password = currentPassword,
                Balance = currentBalance,
                Card = cardEntity,
                FullName = fullName
            };

            await UserService.UpdateUserAsync(userEntity);
            confirmation = true;
            IsDisabled = true;
            error = "";
            toChangeToWhite = "lightblue";
        }
        catch (Exception e)
        {
            error = e.Message;
            color = "red";
        }
    }

}