@page "/Billpayments"
@using HTTPClients.ClientInterfaces
@using Domains.Entity
@using UIComponents

@inject IBillPaymentService BillPaymentService;
@inject AuthenticationStateProvider StateProvider;
@inject NavigationManager NavMgr;
@inject IUserService UserService;


<AuthorizeView>
    <Authorized>

        <div class="container">
            <h3>Bill Payment</h3>

            <div class="row">
                @*This is the first box to display the image and send/Cancel button*@
                <div class="col-md-3 first-box">
                    <div class="icon-image">
                        <img src="images/KANPAY logo.png" alt="">
                    </div>


                    <div class="buttonDiv">
                        <button class="button" @onclick="PayBill">Send</button>
                        <button class="button" @onclick="cancel">Cancel</button>
                    </div>
                </div>

                @*This is the second box to display the fields*@
                <div class="col-md-6 second-box">
                    <div class="form-group">

                        <label>Payee</label>
                        <div class="inputFields">
                            <input type="text" class="fieldLength" @bind="payee">
                        </div>

                        <label>Account number</label>
                        <div class="inputFields">
                            <input type="number" class="fieldLength" @bind="accountNumber">
                        </div>

                        <label>Amount</label>
                        <div class="inputFields">
                            <input type="number" class="fieldLength" @bind="amount">
                        </div>

                        <label>Date</label>
                        <div class="inputFields">
                            <input type="date" @bind="dateTime" min="@DateTime.Now.Date.ToString("yyyy-MM-dd")" max="@DateTime.Now.Date.ToString("yyyy-MM-dd")">
                        </div>

                        <label>Reference</label>
                        <div class="inputFields">
                            <input type="text" class="fieldLength" @bind="Refrence">
                        </div>

                    </div>
                </div>
                @*This is third box to display the bill payments history*@
                <div class="col-md-3 third-box">
                    <label class="header">Recent bill payments</label>
                    <hr class="hr1"/>

                    @if (billPayment.Count != 0)
                    {
                        <div class="table_box">
                            <table class="table table-borderless">
                                <thead>
                                <tr>
                                    <th>Payee</th>
                                    <th>Amount</th>
                                    <th>Date</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var billEntity in billPayment)
                                {
                                    <tr>
                                        @*Payee*@
                                        <td>
                                            <span class="value">@billEntity.Payee</span>
                                        </td>
                                        @*Amount*@
                                        <td>
                                            <span class="value">@billEntity.Amount</span>
                                        </td>
                                        @*Date*@
                                        <td>
                                            <span class="value">@billEntity.Date</span>
                                        </td>
                                    </tr>
                                }
                                </tbody>

                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="field">
                            <label style="color: red">
                                <span>No Transactions Found for @senderUser</span>
                            </label>
                        </div>
                    }
                </div>
            </div>

            <div class="error">
                @if (!string.IsNullOrEmpty(errorLabel))
                {
                    <label style="color: @color">@errorLabel</label>
                }
            </div>

        </div>

        <Modal ShowModal="showModal">
            <p >You have successfully transferred the amount!</p>
            <div>
                <button class="button" @onclick="@Proceed">OK</button>
            </div>
        </Modal>


    </Authorized>
    <NotAuthorized>
        <h2>You must be logged in to be able to view this page--</h2>
    </NotAuthorized>

</AuthorizeView>


@code {

    private string? sender;
    private string? payee = "";
    private string? amount = "";
    private DateTime dateTime = DateTime.Now.Date;
    private string accountNumber;
    private string? Refrence = "";
    private UserEntity? senderUser = new UserEntity();

    private bool showModal;
    private ICollection<BillPaymentEntity>? billPayment = new List<BillPaymentEntity>();
    private ICollection<TransactionEntity>? transactionEntities = new List<TransactionEntity>();

    private string errorLabel = "";
    private string color = "";


    protected override async Task OnInitializedAsync()
    {
        try
        {
            AuthenticationState state = await StateProvider.GetAuthenticationStateAsync();
            sender = state.User.Claims.FirstOrDefault(claim => claim.Type.Equals("username"))!.Value.ToString();

            senderUser = await UserService.FetchUserByUsernameAsync(sender);
            billPayment = await BillPaymentService.FetchAllTransactionsInvolvingUser(sender);
            
    // billPayment = await BillPaymentService.FetchAllTransactionsInvolvingUser(sender);
            showModal = false;
        }
        catch (Exception e)
        {
            errorLabel = e.Message;
            color = "red";
        }
    }


    private async Task PayBill()
    {
        string date = $"{dateTime.Date.Day}/{dateTime.Date.Month}/{dateTime.Date.Year}";

        try
        {
            if (string.IsNullOrEmpty(payee)) throw new Exception("payee name must be filled in");
            if (int.Parse(accountNumber) <= 0) throw new Exception("Invalid account number");

            if (accountNumber.Length != 10) throw new Exception("Account number must be of 10 digits");
            if (string.IsNullOrEmpty(amount)) throw new Exception("amount must be filled in");
            if (int.Parse(amount) <= 0) throw new Exception("Amount must be more than 0.");

            Console.WriteLine("before create method");
            await BillPaymentService.CreateAsync(new BillPaymentEntity(senderUser, payee, accountNumber, Int32.Parse(amount), date, Refrence));
            Console.WriteLine("after create method");
            showModal = true;
        }
        catch (Exception e)
        {
            errorLabel = e.Message;
            color = "red";
        }
    }

    
    // private async Task DisplayAllBillPayments()
    // {
    //     
    //     billPayment = await BillPaymentService.FetchAllTransactionsInvolvingUser(sender);
    // }

    private void Proceed()
    {
        showModal = false;
        NavMgr.NavigateTo("/");
    }

    private void cancel()
    {
        NavMgr.NavigateTo("/");
    }



}