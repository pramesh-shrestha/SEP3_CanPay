@using Domains.Entity
@using HTTPClients.ClientInterfaces
@namespace BlazorServerApp.Pages
@inject INotificationService NotificationService;
@inject NavigationManager NavMgr;

<AuthorizeView>
    <Authorized>
         <div class="container-text">
                        <span class="text">Hello, Welcome to KanPay</span>
                    </div>
        <div class="container">
            <img src="images/notification-bell.png" class="notification-icon" @onclick="@(() => showNotification = !showNotification)" alt="notification" style="cursor: pointer"/>
            <div class="number-div">
                <button class="number">
                    <span class="noti_count">@notification.Count</span>
                </button>
            </div>
        </div>
        
        @if (showNotification)
                    {
                        <div class="noti-body ">
                            <label class="header">Notifications</label>
                            <hr class="hr1"/>
                            <div class="card">
                                @foreach (var items in notification)
                                {
                                    <div class="card-body">
                                        <label class="notification-table" >@items.Message</label>
                                        <label class="date text-muted">@items.Date</label>
                                    </div>
                                }
                            </div>
                    </div>
                    }
    </Authorized>
</AuthorizeView>

@code {
    private UserEntity? senderUser;
    private UserEntity? receiverUser= new UserEntity();
    private string? receiver;
    private string? notificationType = "";
    public string? Message = "";
    private DateTime dateTime = DateTime.Now.Date;
    public bool IsRead;
    private ICollection<NotificationEntity>? notification= new List<NotificationEntity>();
    private bool showNotification = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            notification = await NotificationService.FetchAllNotificationsByReceiverAsync(receiverUser!.UserName);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    /*public async Task CreateNotification()
    {
        try
        {
            Message = "someone has sent you money bororo";
            string date = $"{dateTime.Date.Day}/{dateTime.Date.Month}/{dateTime.Date.Year}";
            NotificationEntity notificationEntity = new NotificationEntity
                (notificationId, senderUser, receiverUser, Message, notificationType, date, IsRead);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }*/
    
    


}